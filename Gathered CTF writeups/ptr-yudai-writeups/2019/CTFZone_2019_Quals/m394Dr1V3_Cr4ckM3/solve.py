from z3 import *

key = [BitVec("key{:02x}".format(i), 8) for i in range(0x10)]
s = Solver()
for c in key:
    s.add(And(ord('0') <= c, c <= ord('Z')))
s.add(And(
    key[0]*0x4f + key[1]*0x28 + key[2]*0x04 + key[3]*0x1c == (-9 % 0x100),
    key[0]*0x25 + key[1]*0x3f + key[2]*0x05 + key[3]*0x3c == 0x2f,
    key[0]*0x60 + key[1]*0x40 + key[2]*0x5e + key[3]*0x08 == 2,
    key[0]*0x3b + key[1]*0x01 + key[2]*0x4e + key[3]*0x10 == (-0x4a % 0x100)
))
s.add(And(
    key[4]*0x4f + key[5]*0x28 + key[6]*0x04 + key[7]*0x1c == (-0x48 % 0x100),
    key[4]*0x25 + key[5]*0x3f + key[6]*0x05 + key[7]*0x3c == (-3 % 0x100),
    key[4]*0x60 + key[5]*0x40 + key[6]*0x5e + key[7]*0x08 == 0x18,
    key[4]*0x3b + key[5]*0x01 + key[6]*0x4e + key[7]*0x10 == (-0x71 % 0x100)
))
s.add(And(
    key[8]*0x4f + key[9]*0x28 + key[10]*0x04 + key[11]*0x1c == 0x3e,
    key[8]*0x25 + key[9]*0x3f + key[10]*0x05 + key[11]*0x3c == (-0x48 % 0x100),
    key[8]*0x60 + key[9]*0x40 + key[10]*0x5e + key[11]*0x08 == (-0x70 % 0x100),
    key[8]*0x3b + key[9]*0x01 + key[10]*0x4e + key[11]*0x10 == (-0x20 % 0x100)
))
s.add(And(
    key[12]*0x4f + key[13]*0x28 + key[14]*0x04 + key[15]*0x1c == (-0x31%0x100),
    key[12]*0x25 + key[13]*0x3f + key[14]*0x05 + key[15]*0x3c == (-0x7b%0x100),
    key[12]*0x60 + key[13]*0x40 + key[14]*0x5e + key[15]*0x08 == (-0x34%0x100),
    key[12]*0x3b + key[13]*0x01 + key[14]*0x4e + key[15]*0x10 == 0x41
))

answer = ['?' for i in range(0x10)]
r = s.check()
if r == sat:
    m = s.model()
    for d in m.decls():
        print(d, m[d])
        answer[int(d.name()[3:], 16)] = chr(m[d].as_long())
    answer = ''.join(answer)
    print("Found!")
    print(answer)
else:
    print("unsat...")
