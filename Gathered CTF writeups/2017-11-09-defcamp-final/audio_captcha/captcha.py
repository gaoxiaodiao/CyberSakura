import codecs
import urllib2

import requests

from crypto_commons.generic import chunk_with_remainder


def download_wav():
    url = 'https://audio-captcha.dctf-f1nals-2017.def.camp/index.php?audio'
    opener = urllib2.build_opener()
    opener.addheaders.append(('Cookie', 'PHPSESSID=16dmmhicdcv2i1ocrzs80xxrtr'))
    wav = opener.open(url).read()
    with codecs.open("captcha.wav", mode="wb") as output:
        output.write(wav)


def convert_to_speech():
    patterns = [
        (
            'FE41007AFE3000D7FDFCFFDFFD8E00F1FDEF003FFEEB00EDFE830150FFD20115007401B0007F013E016B01E30163015902D6011B037F0147037D01A2036901'.decode(
                "hex"), "3"),
        (
            '3E01DB057BFEEF0534FD5105CEFC350575FD510567FF9105A401CF05D80380069E056B066006C205B2053604DC03DA002200C3FB2CFAF0F52BF3EFEE12EC73E77FE4FCDF51DEBED9EED9B5D41DD813'.decode(
                "hex"), "5"),
        (
            "84019D02B6014B00C902BFFD97030EFCE803CEFB1504DBFC46036AFE1E021001BA00C6036FFF4B05FFFE860622FF700616002E05C000B7039A01A6015E02BE".decode(
                "hex"), "e"),
        (
            "8BF5D8F7AFF3FCF6F1F03BF54AEFF8F261ED97EF57EC7FEB9FECBEE6CEED54E211F039E0E8F243DECBF5D0DD36F801DFD7FA10E13BFCF9E343FE68E7A100E7EA".decode(
                "hex"), "1"),
        (
            "03A601DA038A02DD0286039402A5033E010E03B2009702FD00E501200075004500BBFE9200BFFD1601A1FC39011CFC1C019BFC3E0133FDEC0025FE3F008EFF".decode(
                "hex"), "b"),
        (
            "7B29F82AA52953296A29EF26092874242027B621A424171F49224B1DAD1FA11A6B1CE6184F1833161B147E13520F5310BA0A390C21067A077001CE01FDFC31".decode(
                "hex"), "7"),
        (
            "A9FF100020FFE4FF8BFE420012FE28005CFE5C006CFEEBFFC5FEB7FF05FF7DFF63FE94FEA6FD2DFEF2FCC4FDC9FB9FFD92FB78FE8EFCD5FE3BFD81FF28FE85FF92FFA3FFB500A8FF4C0193FFBE010D".decode(
                "hex"), "7"),
        (
            "04F94C024FF9D9029CF9C00119FB0F0061FCEEFD02FE16FCA7FFB4FA6201B9F9640294F9FC0261F99902DEF8D3019AF85300A5F894FEF3F705FD6CF7C0FB1FF7A7FA6EF7D6F9F4F712FA33F9ECF9ACFA".decode(
                "hex"), "2"),
        (
            "44E452DCA7E402DB34E597DA03E7ECDA42E9A7DB6BEBE4DD16EE32E08CF050E3B9F3D9E668F698EAC8F9BEEE6DFDD2F2540124F78B05D7FB180A3800DF0DE304D911B809CB15020F29194B13B41BC6".decode(
                "hex"), "4"),
        (
            "B6FF83F8880129F8C4025CF9EA02BEFBF301E7FFA1007C0307003D063E007C072F016606660317045305B40094076AFDB20829FB9D0823FB100721FD9805A1".decode(
                "hex"), "d"),
        (
            "FAF671EF6BF722F045F91AF23CFC56F51F00D9F8B70410FCB508E0FEFB0BB7003D0D4F01240CDA0131093902FB03900255FE390356F8930367F2F4020BEFB30137ED89FED1ED2FFAB6EFF3F40DF30D".decode(
                "hex"), "3"),
        (
            "25E715F2D7E5B3F0D4E41AEF9FE496ED96E4FBEB0DE584EA33E657E910E7BEE8F5E7E0E84FE924E9B0EA47EAAAEB7DEBE0ECBFEC63EEB2EDE6EFCFEE3EF281F0C9F4DAF15BF755F3E1F9ECF4F5FBD5".decode(
                "hex"), "0"),
        ('9C01AA04F7014D05C001E0053F01C905E6006C0570007904D300B7035101CC02BD01D1017E02C20022039EFF9E0295'.decode("hex"),
         "c"),
        ('80FDCFE728FEEDE798FE95E9A2FEE0EBE4FEE3EE56FE60F208FEF7F5B8FD2AF98BFD27FC2BFEF6FEE5FE1B027700E9'.decode(
            "hex"), "f"),
        (
            '0D02B601D8030401330554FE3304BFFB5601AFF854FDD5F64BF9FDF69BF53FF842F4A7FA75F5EFFD99F9E200EEFE2B027D0494015409CBFE650C45FBD10B57F8AF0827F6D00266F6C8FB8CF8DAF409FC12F0F0FF57EE3B030CEF48042BF32503E5F87A0014FF9BFC8B04A6F9BE07ABF74A08B6F7B706BAF9F802F3FCFFFDB6FFA4F9010244F68502B0F4E800DBF460FF66F627FD26F90CFC56FC39FC6EFFF6FD960283000B053303E906E804570860'.decode(
                "hex"), "e"),
        ('7BFA900038FC1DFF07FEEBFDEDFFE9FCE8013CFC67031DFCDB032CFC7B0375FC1A03F7FC830293FDA00186FE7A0094'.decode(
            "hex"), "8"),
        ('FBFA1BFAEAF8FFF99DF71CFAADF68FFAC4F53CFBA8F65AFC8DF7A0FD90F894FF3EFAAE0139FBB603BAFC6B05FCFD0A07'.decode(
            "hex"), "9"),
        ('C3F868F608F8ABF594F686F56FF5B3F43BF430F59DF319F6DAF2A0F76DF210F961F310FB90F46FFC38F6F4FD38F8E6'.decode(
            "hex"), 'a'),
        ('F1FAD60557F9F406E0F70F09D5F78A0B9FF8B20DD2FAA90FD9FDCC0FA200F90E2203020D9005EA0A43061B087205EF'.decode(
            "hex"), '6'),
    ]
    download_wav()
    audio = open('captcha.wav', 'rb').read()[44:] # skip header

    res = ""
    for chunk in chunk_with_remainder(audio, len(audio) / 10)[:10]:
        matching_values = set()
        for (pat, val) in patterns:
            if pat in chunk[5000:-5000]:
                if str(val) not in matching_values:
                    if len(matching_values) == 0:
                        res += str(val)
                    matching_values.add(str(val))
        if len(matching_values) != 1:
            print(matching_values)
            return "X"
    return res


def main():
    while True:
        res = convert_to_speech()
        print(res)
        if "X" not in res:
            r = requests.get("https://audio-captcha.dctf-f1nals-2017.def.camp/index.php?audio_answer=" + res,
                             cookies={"PHPSESSID": "16dmmhicdcv2i1ocrzs80xxrtr"})
            if "invalid" in r.text.lower():
                print("invalid " + res)
            if "DCTF" in r.text:
                print(r.text)


main()
