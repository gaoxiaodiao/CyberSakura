----
000: COPY 01, 7f # reg_7f = reg_01
003: LSETI 5c # A = 0x5c
005: EECALL 08 # call 08
007: RET 
----
008: LSTATUSA            # set status from A
009: SELECTMA 10, 01, 08 # matA is now 1x8, at 0x10
00d: SELECTMB 18, 01, 08 # matB is now 1x8, at 0x18
011: MOP 19              # reg[18:20] = reg[10:18]
015: COPY0 10            # reg_10 = 2
01a: COPY0 11            # reg_11 = 2f
01c: LONGUWORD 00, 97    # reg_0 = 97
01f: COPY0 12            # reg_12 = 97
021: SELECTA 12          # A points to 12
023: LSUB 11             # reg_12 = 0x68
025: LWRITE 13, 4b, a9, dc, 18 # reg_13 = 4ba9dc18 # also at 2a: fwritex *X++ = 4 bytes
02b: EECALL 250          # call 250
02d: SELECTMA 10, 01, 08 # matA is now 1x8, at 0x8 ; also from 1: selecta 8
031: SELECTMB 18, 01, 08 # matB is now 1x8, at 0x8
035: MOP 1b              # matA = matB
037: NOP                 #
038: READVAR 0e          # length of string
03a: SELECTA 00          # A points to 0
03c: LUCMPI 17           # A <?> 17
03e: BRA,cc 10, 4e       # then go to bad
041: STRSEL 00, 06       # select first six characters
044: STRCMP 44, 72, 67, 6e, 53, 7b # compare with DrgnS{
04c: BRA,cc 10, 40       # if not, go to bad
04f: STRSEL 16, 01       # select 16th character
052: STRCMP 7d           # compare with }
055: BRA,cc 10, 37       # if not, go to bad
058: STRFCHR 7b, 7d      # set {} as separators
05c: STRFIELD 02         # select second field
060: LSETI 28            # r1 = 28
062: CLR 02              # r2 = 0
064: SELECTA 00          # A points to 0
066: READVAR 11          # r0 = read char at selection point
068: SAVEIND 01          # reg[reg_1] = r0 # put the sixteen bytes at 28:38
06a: LINC 01             # r1++
06c: LINC 02             # r2++
06e: STRINC              # sel++
06f: SELECTA 02          # A points to 2
071: LUCMPI 10           # cmp with 10
073: JMP,cc 50, 00, 5b   # if neq, go to 64
077: EECALL 160          # call 160
079: SELECTA 00          # A points to 0
07b: LUCMPI 01           # A == 1 ?
07d: BRA,cc 50, 0f       # if neq, go to bad
080: STRSET 57, 65, 6c, 6c, 20, 44, 6f, 6e, 65, 21     # Well Done!
08c: JMP 00, 97
08f: STRSET 57, 72, 6f, 6e, 67, 20, 66, 6c, 61, 67, 2e # Wrong flag.
09c: JMP 00, 97
09f: NOP 
0a0: COPY 00, 18
0a3: LONGUBYTE 02
0a5: COPY0 10
0a7: LONGUWORD 00, 2f
0aa: COPY0 11
0ac: LONGUWORD 00, 97
0af: COPY0 12
0b1: SELECTA 12
0b3: LSUB 11
0b5: LWRITE 13, 4b, a9, dc, 18
0bb: EECALL 250
0bd: COPY 18, 00
0c0: RET 
0c1: NOP 
0c2: NOP 
0c3: NOP 

---- set constant values to 48:58
0c4: LREADBYTE 
0c5: SELECTMA 10, 01, 08
0c9: SELECTMB 18, 01, 08
0cd: MOP 19
0cf: LONGUBYTE 31
0d1: COPY0 10
0d3: LONGUWORD 00, 2f
0d6: COPY0 11
0d8: LONGUWORD 00, 77
0db: COPY0 12
0dd: SELECTA 12
0df: LSUB 11
0e1: LWRITE 13, 17, db, 41, dc
0e7: EECALL 250
0e9: SELECTMA 10, 01, 08
0ed: SELECTMB 18, 01, 08
0f1: MOP 1b
0f3: NOP 
0f4: SELECTX 48   # x points to 48
0f6: WRBLK 7a, e5, 85, 02, 22, b8, 2d, 4f, 3d, 29, 00, f9, 13, 37, af, 79, 10, 2e, 27, 16, 6e, 3e, 27, 6d, 0d, ab, 72, 58, 2c, 42, 95, 2c, 72, d3, 88, 9b, 11, 0d, e1, f0, 58, a0, 98, d1, 79, 23, 05, 35, 37, d0, 46, 71, 09, 65, af, 85, 13, 91, 95, a6, 2b, 73, 35, 62
138: JMP 00, 77
13b: NOP 
13c: COPY 00, 18
13f: LONGUBYTE 31
141: COPY0 10
143: LONGUWORD 00, 2f
146: COPY0 11
148: LONGUWORD 00, 77
14b: COPY0 12
14d: SELECTA 12
14f: LSUB 11
151: LWRITE 13, 17, db, 41, dc
157: EECALL 250
159: COPY 18, 00
15c: RET 
15d: NOP 
15e: NOP 
15f: NOP 

---- check flag sixteen at 28:38
160: EELOAD 65, 40
163: SELECTA 08
165: SELECTMB 18, 01, 08
169: MOP 19
16b: LONGUBYTE 58
16d: COPY0 10
16f: LONGUWORD 00, 2f
172: COPY0 11
174: LONGUWORD 00, bb
177: COPY0 12
179: SELECTA 12
17b: LSUB 11
17d: LWRITE 13, 73, d4, 01, ac
183: EECALL 250
185: SELECTMA 10, 01, 08
189: SELECTMB 18, 01, 08
18d: MOP 1b
18f: NOP 
190: EECALL c4            # first call c4 (setup consts)
192: SELECTMB 28, 04, 04  # matB is matrix 4x4 from 28
196: SELECTMA 38, 04, 04  # matA is matrix 4x4 from 38
19a: MOP 13               # matA = xpose matB
19c: CLR0                 # r0 = 0
19d: LINC 00              # r0++
19f: LINC 00              # r0++
1a1: LINC 00              # r0++ (eq 3)
1a3: MOP 01               # matA += r0
1a5: LWRITE 02, 41, c6, 4e, 6d # r2 = 
1ab: LWRITE 03, a5, a5, a5, a5 # r3 = 
1b1: LWRITE 04, 00, 00, 30, 39 # r4 = 
1b7: LWRITE 05, 7f, ff, ff, ff # r5 = 
1bf: LSETI 08             # r9 = 8
1c3: LSETI 10             # ra = 10
1c7: LSETI 18             # rb = 18
1cb: LSETI 38             # r1 = 38
1cd: CLR 0c               # rc = 0
1cf: SELECTA 0d
1d1: LSETI 48             # rd = 48 (consts)
1d5: LMUL 02              # r3 *= r2
1d7: LADD 04              # r3 += r4
1d9: LAND 05              # r3 &= r5
1db: LOADIND 01           # r0 = reg[r1]
1df: COPY0 06             # r6 = r0
1e1: COPY0 07             # r7 = r0
1e3: COPY0 08             # r8 = r0
1e7: LSHIFT 09            # r6 is shifted left by r9 (i.e. 8)
1eb: LSHIFT 0a            # r7 is shifted left by ra (i.e. 10)
1ef: LSHIFT 0b            # r8 is shifted left by rb (i.e. 18)
1f3: LOR 06               # r0 |= r6
1f5: LOR 07               # r0 |= r7
1f7: LOR 08               # r0 |= r8
1f9: LXOR 03              # r0 ^= r3
1fb: SAVEIND 01           # reg[r1] = r0
1fd: COPY0 06             # r6 = r0
1ff: LOADIND 0d           # r0 = reg[rd]
203: LXOR 06              # r0 ^= r6
207: LOR 00               # rc |= r0
209: LINC 0d              # rd++
20b: LINC 01              # r1++
20d: SELECTA 01           # A points to 1
20f: LUCMPI 48            # r1 <?> 48
211: BRA,cc 50, bf        # if neq, go to 1d3
214: LINC 0c              # rc++
216: COPY 0c, 00          # r0 = rc
219: JMP 00, bb           #
21c: COPY 00, 18
21f: LONGUBYTE 58
221: COPY0 10
223: LONGUWORD 00, 2f
226: COPY0 11
228: LONGUWORD 00, bb
22b: COPY0 12
22d: SELECTA 12
22f: LSUB 11
231: LWRITE 13, 73, d4, 01, ac
237: EECALL 250
239: COPY 18, 00
23c: RET 
23d: NOP 
23e: NOP 
23f: NOP 

---- "push"
240: CLRX       # *X++ = 0
241: SAVEIND 7f # reg[reg_7f] = A
243: LINC 7f    # reg_7f++
245: RET 
246: NOP 
247: NOP 

---- "pop"
248: CLR0       # reg_0 = 0
249: LDEC 7f    # reg_7f--
24b: LOADIND 7f # reg_0 = reg[reg_7f]
24d: LSET0      # reg_A = reg_0
24e: RET 
24f: NOP 

---- decrypt code (just xor stuff with reg13)
250: FLOOR      # regA = floor(regA)
251: SELECTA 18 # push 18
255: SELECTA 19 # push 19
259: SELECTA 1a # push 1a
25f: LSETI fe   # r1 = -2
263: LSHIFT 01  # r12 >>= 2
267: LINC 11    # reg_11++
269: LSHIFT 01  # r11 >>= 2
26d: LADD 11    # r10 += reg_11
271: LSET 10    # r18 = reg_10
273: LADD 12    # r18 += reg_12
275: COPY 10, 19 # reg_19 = reg_10
278: COPY 13, 1a # reg_1a = reg_13
27e: EECALL 2c0  # call 2c0
280: SELECTA 00  # A points to 0
282: LXOR 1a     # A ^= reg_1a
284: COPY 00, 11 # reg_11 = reg_0
287: COPY 19, 10 # reg_10 = reg_19
28a: EECALL 2a4  # call 2a4
28c: LINC 19     # reg_19++
28e: LUCMP2 19, 18 # status = reg_19-reg_18 SZ
291: JMP,cc 50, 00 2a # JNE a8?? or 2a??
295: SELECTA 1a    # pop 1a
299: SELECTA 19    # pop 19
29d: SELECTA 18    # pop 18
2a1: RET 
2a2: NOP 
2a3: NOP 

---- write progmem reg_11 at reg_10???
2a4: FWRITEX 01, 02, ae, 10 # *X++ = 0102ae10
2a9: SELECTA 10             # A points to 10
2ab: LSHIFT 02              # A is shifted left by reg_02
2ad: SELECTA 01             # A points to 1
2af: LWRITEA 80, 00, db, 03 # reg_1 = 8000db03 (ret, nop, eesavea c - maybe inverted???)
2b4: LOR 10                 # A |= reg_10
2b6: EESAVEA 3fc            # EE_3fc = A
2b8: SELECTA 11             # A points to 11
2ba: EECALL 3fc             # call 3fc
2bc: RET 
2bd: NOP 
2be: NOP 
2bf: NOP 

---- read progmem at reg_10???
2c0: FWRITEX 01, 02, ae, 10 # *X++ = 0102ae10
2c5: SELECTA 10             # A points to 10
2c7: LSHIFT 02              # A is shifted left by reg_02
2c9: SELECTA 01             # A points to 1
2cb: LWRITEA 80, 00, dd, 03 # reg_1 = 8000dd03 (ret, nop, eeloada c)
2d0: LOR 10                 # A |= reg_10
2d2: EESAVEA 3fc            # EE_3fc = A
2d4: SELECTA 00             # A points to 0
2d6: EECALL 3fc             # call 3fc
2d8: RET 
2d9: NOP 
2da: NOP 
2db: NOP 
